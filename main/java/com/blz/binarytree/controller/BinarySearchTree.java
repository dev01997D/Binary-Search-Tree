/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.blz.binarytree.controller;

public class BinarySearchTree<k extends Comparable<k>> {
	private MyBinaryNode<k> root;

	public void addKey(k key) {
		this.root = this.addRecursively(root, key);
	}

	private MyBinaryNode<k> addRecursively(MyBinaryNode<k> current, k key) {
		if (current == null)
			return new MyBinaryNode<>(key);
		int compResult = key.compareTo(current.key);
		if (compResult == 0)
			return current;
		if (compResult < 0)
			current.left = addRecursively(current.left, key);
		else
			current.right = addRecursively(current.right, key);

		return current;
	}

	public int getSize() {
		return this.getSizeRecursively(root);
	}

	private int getSizeRecursively(MyBinaryNode<k> current) {
		return current == null ? 0 : 1 + this.getSizeRecursively(current.right) + this.getSizeRecursively(current.left);
	}
	
	public k searchKey(k key) {
		return key = this.searchRecursively(root, key);
	}

	public k searchRecursively(MyBinaryNode<k> current,k key) {
		k searchKey = null;
		if (current.key == null || current.key==key)
			return current.key;
		int compResult=key.compareTo(current.key);
		if (compResult<0)
			searchKey=searchRecursively(current.left, key);
		if(compResult>0)
			searchKey=searchRecursively(current.right, key);
		return searchKey;
	}
}
